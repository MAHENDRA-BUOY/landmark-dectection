import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load Pretrained InceptionV3 model
base_model = keras.applications.InceptionV3(weights='imagenet', include_top=False, input_shape=(128, 128, 3))
base_model.trainable = False  # Freeze base model layers

# Build Model
model = keras.Sequential([
    base_model,
    keras.layers.GlobalAveragePooling2D(),
    keras.layers.Dense(1024, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(6151, activation='softmax')  # 6151 classes
])

# Compile Model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Data Augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255, rotation_range=30, width_shift_range=0.2, height_shift_range=0.2,
    horizontal_flip=True, fill_mode='nearest')

# Load Training Data (Replace with actual dataset path)
train_generator = train_datagen.flow_from_directory(
    'dataset/train', target_size=(128, 128), batch_size=32, class_mode='sparse')

# Train Model
model.fit(train_generator, epochs=10)

# Save Model
model.save('landmark_recognition_model.h5')

# Load Test Data & Evaluate (Replace with actual dataset path)
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    'dataset/test', target_size=(128, 128), batch_size=32, class_mode='sparse', shuffle=False)

# Predict
y_pred = model.predict(test_generator)
y_pred_classes = np.argmax(y_pred, axis=1)

# Confusion Matrix
cm = confusion_matrix(test_generator.classes, y_pred_classes)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=False, cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Classification Report
print(classification_report(test_generator.classes, y_pred_classes))
